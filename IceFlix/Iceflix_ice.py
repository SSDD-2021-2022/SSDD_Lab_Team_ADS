# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.6
#
# <auto-generated>
#
# Generated from file `Iceflix.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module IceFlix
_M_IceFlix = Ice.openModule('IceFlix')
__name__ = 'IceFlix'

if 'Unauthorized' not in _M_IceFlix.__dict__:
    _M_IceFlix.Unauthorized = Ice.createTempClass()
    class Unauthorized(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceFlix::Unauthorized'

    _M_IceFlix._t_Unauthorized = IcePy.defineException('::IceFlix::Unauthorized', Unauthorized, (), False, None, ())
    Unauthorized._ice_type = _M_IceFlix._t_Unauthorized

    _M_IceFlix.Unauthorized = Unauthorized
    del Unauthorized

if 'WrongMediaId' not in _M_IceFlix.__dict__:
    _M_IceFlix.WrongMediaId = Ice.createTempClass()
    class WrongMediaId(Ice.UserException):
        def __init__(self, id=''):
            self.id = id

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceFlix::WrongMediaId'

    _M_IceFlix._t_WrongMediaId = IcePy.defineException('::IceFlix::WrongMediaId', WrongMediaId, (), False, None, (('id', (), IcePy._t_string, False, 0),))
    WrongMediaId._ice_type = _M_IceFlix._t_WrongMediaId

    _M_IceFlix.WrongMediaId = WrongMediaId
    del WrongMediaId

if 'TemporaryUnavailable' not in _M_IceFlix.__dict__:
    _M_IceFlix.TemporaryUnavailable = Ice.createTempClass()
    class TemporaryUnavailable(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceFlix::TemporaryUnavailable'

    _M_IceFlix._t_TemporaryUnavailable = IcePy.defineException('::IceFlix::TemporaryUnavailable', TemporaryUnavailable, (), False, None, ())
    TemporaryUnavailable._ice_type = _M_IceFlix._t_TemporaryUnavailable

    _M_IceFlix.TemporaryUnavailable = TemporaryUnavailable
    del TemporaryUnavailable

if 'UploadError' not in _M_IceFlix.__dict__:
    _M_IceFlix.UploadError = Ice.createTempClass()
    class UploadError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceFlix::UploadError'

    _M_IceFlix._t_UploadError = IcePy.defineException('::IceFlix::UploadError', UploadError, (), False, None, ())
    UploadError._ice_type = _M_IceFlix._t_UploadError

    _M_IceFlix.UploadError = UploadError
    del UploadError

if 'UnknownService' not in _M_IceFlix.__dict__:
    _M_IceFlix.UnknownService = Ice.createTempClass()
    class UnknownService(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceFlix::UnknownService'

    _M_IceFlix._t_UnknownService = IcePy.defineException('::IceFlix::UnknownService', UnknownService, (), False, None, ())
    UnknownService._ice_type = _M_IceFlix._t_UnknownService

    _M_IceFlix.UnknownService = UnknownService
    del UnknownService

_M_IceFlix._t_StreamController = IcePy.defineValue('::IceFlix::StreamController', Ice.Value, -1, (), False, True, None, ())

if 'StreamControllerPrx' not in _M_IceFlix.__dict__:
    _M_IceFlix.StreamControllerPrx = Ice.createTempClass()
    class StreamControllerPrx(Ice.ObjectPrx):

        def getSDP(self, userToken, port, context=None):
            return _M_IceFlix.StreamController._op_getSDP.invoke(self, ((userToken, port), context))

        def getSDPAsync(self, userToken, port, context=None):
            return _M_IceFlix.StreamController._op_getSDP.invokeAsync(self, ((userToken, port), context))

        def begin_getSDP(self, userToken, port, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.StreamController._op_getSDP.begin(self, ((userToken, port), _response, _ex, _sent, context))

        def end_getSDP(self, _r):
            return _M_IceFlix.StreamController._op_getSDP.end(self, _r)

        def stop(self, context=None):
            return _M_IceFlix.StreamController._op_stop.invoke(self, ((), context))

        def stopAsync(self, context=None):
            return _M_IceFlix.StreamController._op_stop.invokeAsync(self, ((), context))

        def begin_stop(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.StreamController._op_stop.begin(self, ((), _response, _ex, _sent, context))

        def end_stop(self, _r):
            return _M_IceFlix.StreamController._op_stop.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceFlix.StreamControllerPrx.ice_checkedCast(proxy, '::IceFlix::StreamController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceFlix.StreamControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceFlix::StreamController'
    _M_IceFlix._t_StreamControllerPrx = IcePy.defineProxy('::IceFlix::StreamController', StreamControllerPrx)

    _M_IceFlix.StreamControllerPrx = StreamControllerPrx
    del StreamControllerPrx

    _M_IceFlix.StreamController = Ice.createTempClass()
    class StreamController(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceFlix::StreamController')

        def ice_id(self, current=None):
            return '::IceFlix::StreamController'

        @staticmethod
        def ice_staticId():
            return '::IceFlix::StreamController'

        def getSDP(self, userToken, port, current=None):
            raise NotImplementedError("servant method 'getSDP' not implemented")

        def stop(self, current=None):
            raise NotImplementedError("servant method 'stop' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceFlix._t_StreamControllerDisp)

        __repr__ = __str__

    _M_IceFlix._t_StreamControllerDisp = IcePy.defineClass('::IceFlix::StreamController', StreamController, (), None, ())
    StreamController._ice_type = _M_IceFlix._t_StreamControllerDisp

    StreamController._op_getSDP = IcePy.Operation('getSDP', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_IceFlix._t_Unauthorized,))
    StreamController._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_IceFlix.StreamController = StreamController
    del StreamController

_M_IceFlix._t_MediaUploader = IcePy.defineValue('::IceFlix::MediaUploader', Ice.Value, -1, (), False, True, None, ())

if 'MediaUploaderPrx' not in _M_IceFlix.__dict__:
    _M_IceFlix.MediaUploaderPrx = Ice.createTempClass()
    class MediaUploaderPrx(Ice.ObjectPrx):

        def receive(self, size, context=None):
            return _M_IceFlix.MediaUploader._op_receive.invoke(self, ((size, ), context))

        def receiveAsync(self, size, context=None):
            return _M_IceFlix.MediaUploader._op_receive.invokeAsync(self, ((size, ), context))

        def begin_receive(self, size, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.MediaUploader._op_receive.begin(self, ((size, ), _response, _ex, _sent, context))

        def end_receive(self, _r):
            return _M_IceFlix.MediaUploader._op_receive.end(self, _r)

        def close(self, context=None):
            return _M_IceFlix.MediaUploader._op_close.invoke(self, ((), context))

        def closeAsync(self, context=None):
            return _M_IceFlix.MediaUploader._op_close.invokeAsync(self, ((), context))

        def begin_close(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.MediaUploader._op_close.begin(self, ((), _response, _ex, _sent, context))

        def end_close(self, _r):
            return _M_IceFlix.MediaUploader._op_close.end(self, _r)

        def destroy(self, context=None):
            return _M_IceFlix.MediaUploader._op_destroy.invoke(self, ((), context))

        def destroyAsync(self, context=None):
            return _M_IceFlix.MediaUploader._op_destroy.invokeAsync(self, ((), context))

        def begin_destroy(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.MediaUploader._op_destroy.begin(self, ((), _response, _ex, _sent, context))

        def end_destroy(self, _r):
            return _M_IceFlix.MediaUploader._op_destroy.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceFlix.MediaUploaderPrx.ice_checkedCast(proxy, '::IceFlix::MediaUploader', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceFlix.MediaUploaderPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceFlix::MediaUploader'
    _M_IceFlix._t_MediaUploaderPrx = IcePy.defineProxy('::IceFlix::MediaUploader', MediaUploaderPrx)

    _M_IceFlix.MediaUploaderPrx = MediaUploaderPrx
    del MediaUploaderPrx

    _M_IceFlix.MediaUploader = Ice.createTempClass()
    class MediaUploader(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceFlix::MediaUploader')

        def ice_id(self, current=None):
            return '::IceFlix::MediaUploader'

        @staticmethod
        def ice_staticId():
            return '::IceFlix::MediaUploader'

        def receive(self, size, current=None):
            raise NotImplementedError("servant method 'receive' not implemented")

        def close(self, current=None):
            raise NotImplementedError("servant method 'close' not implemented")

        def destroy(self, current=None):
            raise NotImplementedError("servant method 'destroy' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceFlix._t_MediaUploaderDisp)

        __repr__ = __str__

    _M_IceFlix._t_MediaUploaderDisp = IcePy.defineClass('::IceFlix::MediaUploader', MediaUploader, (), None, ())
    MediaUploader._ice_type = _M_IceFlix._t_MediaUploaderDisp

    MediaUploader._op_receive = IcePy.Operation('receive', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    MediaUploader._op_close = IcePy.Operation('close', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    MediaUploader._op_destroy = IcePy.Operation('destroy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_IceFlix.MediaUploader = MediaUploader
    del MediaUploader

_M_IceFlix._t_StreamProvider = IcePy.defineValue('::IceFlix::StreamProvider', Ice.Value, -1, (), False, True, None, ())

if 'StreamProviderPrx' not in _M_IceFlix.__dict__:
    _M_IceFlix.StreamProviderPrx = Ice.createTempClass()
    class StreamProviderPrx(Ice.ObjectPrx):

        def getStream(self, id, userToken, context=None):
            return _M_IceFlix.StreamProvider._op_getStream.invoke(self, ((id, userToken), context))

        def getStreamAsync(self, id, userToken, context=None):
            return _M_IceFlix.StreamProvider._op_getStream.invokeAsync(self, ((id, userToken), context))

        def begin_getStream(self, id, userToken, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.StreamProvider._op_getStream.begin(self, ((id, userToken), _response, _ex, _sent, context))

        def end_getStream(self, _r):
            return _M_IceFlix.StreamProvider._op_getStream.end(self, _r)

        def isAvailable(self, id, context=None):
            return _M_IceFlix.StreamProvider._op_isAvailable.invoke(self, ((id, ), context))

        def isAvailableAsync(self, id, context=None):
            return _M_IceFlix.StreamProvider._op_isAvailable.invokeAsync(self, ((id, ), context))

        def begin_isAvailable(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.StreamProvider._op_isAvailable.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_isAvailable(self, _r):
            return _M_IceFlix.StreamProvider._op_isAvailable.end(self, _r)

        def uploadMedia(self, fileName, uploader, adminToken, context=None):
            return _M_IceFlix.StreamProvider._op_uploadMedia.invoke(self, ((fileName, uploader, adminToken), context))

        def uploadMediaAsync(self, fileName, uploader, adminToken, context=None):
            return _M_IceFlix.StreamProvider._op_uploadMedia.invokeAsync(self, ((fileName, uploader, adminToken), context))

        def begin_uploadMedia(self, fileName, uploader, adminToken, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.StreamProvider._op_uploadMedia.begin(self, ((fileName, uploader, adminToken), _response, _ex, _sent, context))

        def end_uploadMedia(self, _r):
            return _M_IceFlix.StreamProvider._op_uploadMedia.end(self, _r)

        def deleteMedia(self, id, adminToken, context=None):
            return _M_IceFlix.StreamProvider._op_deleteMedia.invoke(self, ((id, adminToken), context))

        def deleteMediaAsync(self, id, adminToken, context=None):
            return _M_IceFlix.StreamProvider._op_deleteMedia.invokeAsync(self, ((id, adminToken), context))

        def begin_deleteMedia(self, id, adminToken, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.StreamProvider._op_deleteMedia.begin(self, ((id, adminToken), _response, _ex, _sent, context))

        def end_deleteMedia(self, _r):
            return _M_IceFlix.StreamProvider._op_deleteMedia.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceFlix.StreamProviderPrx.ice_checkedCast(proxy, '::IceFlix::StreamProvider', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceFlix.StreamProviderPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceFlix::StreamProvider'
    _M_IceFlix._t_StreamProviderPrx = IcePy.defineProxy('::IceFlix::StreamProvider', StreamProviderPrx)

    _M_IceFlix.StreamProviderPrx = StreamProviderPrx
    del StreamProviderPrx

    _M_IceFlix.StreamProvider = Ice.createTempClass()
    class StreamProvider(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceFlix::StreamProvider')

        def ice_id(self, current=None):
            return '::IceFlix::StreamProvider'

        @staticmethod
        def ice_staticId():
            return '::IceFlix::StreamProvider'

        def getStream(self, id, userToken, current=None):
            raise NotImplementedError("servant method 'getStream' not implemented")

        def isAvailable(self, id, current=None):
            raise NotImplementedError("servant method 'isAvailable' not implemented")

        def uploadMedia(self, fileName, uploader, adminToken, current=None):
            raise NotImplementedError("servant method 'uploadMedia' not implemented")

        def deleteMedia(self, id, adminToken, current=None):
            raise NotImplementedError("servant method 'deleteMedia' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceFlix._t_StreamProviderDisp)

        __repr__ = __str__

    _M_IceFlix._t_StreamProviderDisp = IcePy.defineClass('::IceFlix::StreamProvider', StreamProvider, (), None, ())
    StreamProvider._ice_type = _M_IceFlix._t_StreamProviderDisp

    StreamProvider._op_getStream = IcePy.Operation('getStream', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_IceFlix._t_StreamControllerPrx, False, 0), (_M_IceFlix._t_Unauthorized, _M_IceFlix._t_WrongMediaId))
    StreamProvider._op_isAvailable = IcePy.Operation('isAvailable', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    StreamProvider._op_uploadMedia = IcePy.Operation('uploadMedia', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_IceFlix._t_MediaUploaderPrx, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_IceFlix._t_Unauthorized, _M_IceFlix._t_UploadError))
    StreamProvider._op_deleteMedia = IcePy.Operation('deleteMedia', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_IceFlix._t_Unauthorized, _M_IceFlix._t_WrongMediaId))

    _M_IceFlix.StreamProvider = StreamProvider
    del StreamProvider

if '_t_StringList' not in _M_IceFlix.__dict__:
    _M_IceFlix._t_StringList = IcePy.defineSequence('::IceFlix::StringList', (), IcePy._t_string)

if 'MediaInfo' not in _M_IceFlix.__dict__:
    _M_IceFlix.MediaInfo = Ice.createTempClass()
    class MediaInfo(object):
        def __init__(self, name='', tags=None):
            self.name = name
            self.tags = tags

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            if self.tags:
                for _i0 in self.tags:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_IceFlix.MediaInfo):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.tags is None or other.tags is None:
                    if self.tags != other.tags:
                        return (-1 if self.tags is None else 1)
                else:
                    if self.tags < other.tags:
                        return -1
                    elif self.tags > other.tags:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_IceFlix._t_MediaInfo)

        __repr__ = __str__

    _M_IceFlix._t_MediaInfo = IcePy.defineStruct('::IceFlix::MediaInfo', MediaInfo, (), (
        ('name', (), IcePy._t_string),
        ('tags', (), _M_IceFlix._t_StringList)
    ))

    _M_IceFlix.MediaInfo = MediaInfo
    del MediaInfo

if 'Media' not in _M_IceFlix.__dict__:
    _M_IceFlix.Media = Ice.createTempClass()
    class Media(object):
        def __init__(self, id='', provider=None, info=Ice._struct_marker):
            self.id = id
            self.provider = provider
            if info is Ice._struct_marker:
                self.info = _M_IceFlix.MediaInfo()
            else:
                self.info = info

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceFlix.Media):
                return NotImplemented
            else:
                if self.id != other.id:
                    return False
                if self.provider != other.provider:
                    return False
                if self.info != other.info:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceFlix._t_Media)

        __repr__ = __str__

    _M_IceFlix._t_Media = IcePy.defineStruct('::IceFlix::Media', Media, (), (
        ('id', (), IcePy._t_string),
        ('provider', (), _M_IceFlix._t_StreamProviderPrx),
        ('info', (), _M_IceFlix._t_MediaInfo)
    ))

    _M_IceFlix.Media = Media
    del Media

_M_IceFlix._t_MediaCatalog = IcePy.defineValue('::IceFlix::MediaCatalog', Ice.Value, -1, (), False, True, None, ())

if 'MediaCatalogPrx' not in _M_IceFlix.__dict__:
    _M_IceFlix.MediaCatalogPrx = Ice.createTempClass()
    class MediaCatalogPrx(Ice.ObjectPrx):

        def getTile(self, id, context=None):
            return _M_IceFlix.MediaCatalog._op_getTile.invoke(self, ((id, ), context))

        def getTileAsync(self, id, context=None):
            return _M_IceFlix.MediaCatalog._op_getTile.invokeAsync(self, ((id, ), context))

        def begin_getTile(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.MediaCatalog._op_getTile.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_getTile(self, _r):
            return _M_IceFlix.MediaCatalog._op_getTile.end(self, _r)

        def getTilesByName(self, name, exact, context=None):
            return _M_IceFlix.MediaCatalog._op_getTilesByName.invoke(self, ((name, exact), context))

        def getTilesByNameAsync(self, name, exact, context=None):
            return _M_IceFlix.MediaCatalog._op_getTilesByName.invokeAsync(self, ((name, exact), context))

        def begin_getTilesByName(self, name, exact, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.MediaCatalog._op_getTilesByName.begin(self, ((name, exact), _response, _ex, _sent, context))

        def end_getTilesByName(self, _r):
            return _M_IceFlix.MediaCatalog._op_getTilesByName.end(self, _r)

        def getTilesByTags(self, tags, includeAllTags, userToken, context=None):
            return _M_IceFlix.MediaCatalog._op_getTilesByTags.invoke(self, ((tags, includeAllTags, userToken), context))

        def getTilesByTagsAsync(self, tags, includeAllTags, userToken, context=None):
            return _M_IceFlix.MediaCatalog._op_getTilesByTags.invokeAsync(self, ((tags, includeAllTags, userToken), context))

        def begin_getTilesByTags(self, tags, includeAllTags, userToken, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.MediaCatalog._op_getTilesByTags.begin(self, ((tags, includeAllTags, userToken), _response, _ex, _sent, context))

        def end_getTilesByTags(self, _r):
            return _M_IceFlix.MediaCatalog._op_getTilesByTags.end(self, _r)

        def addTags(self, id, tags, userToken, context=None):
            return _M_IceFlix.MediaCatalog._op_addTags.invoke(self, ((id, tags, userToken), context))

        def addTagsAsync(self, id, tags, userToken, context=None):
            return _M_IceFlix.MediaCatalog._op_addTags.invokeAsync(self, ((id, tags, userToken), context))

        def begin_addTags(self, id, tags, userToken, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.MediaCatalog._op_addTags.begin(self, ((id, tags, userToken), _response, _ex, _sent, context))

        def end_addTags(self, _r):
            return _M_IceFlix.MediaCatalog._op_addTags.end(self, _r)

        def removeTags(self, id, tags, userToken, context=None):
            return _M_IceFlix.MediaCatalog._op_removeTags.invoke(self, ((id, tags, userToken), context))

        def removeTagsAsync(self, id, tags, userToken, context=None):
            return _M_IceFlix.MediaCatalog._op_removeTags.invokeAsync(self, ((id, tags, userToken), context))

        def begin_removeTags(self, id, tags, userToken, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.MediaCatalog._op_removeTags.begin(self, ((id, tags, userToken), _response, _ex, _sent, context))

        def end_removeTags(self, _r):
            return _M_IceFlix.MediaCatalog._op_removeTags.end(self, _r)

        def renameTile(self, id, name, adminToken, context=None):
            return _M_IceFlix.MediaCatalog._op_renameTile.invoke(self, ((id, name, adminToken), context))

        def renameTileAsync(self, id, name, adminToken, context=None):
            return _M_IceFlix.MediaCatalog._op_renameTile.invokeAsync(self, ((id, name, adminToken), context))

        def begin_renameTile(self, id, name, adminToken, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.MediaCatalog._op_renameTile.begin(self, ((id, name, adminToken), _response, _ex, _sent, context))

        def end_renameTile(self, _r):
            return _M_IceFlix.MediaCatalog._op_renameTile.end(self, _r)

        def updateMedia(self, id, initialName, provider, context=None):
            return _M_IceFlix.MediaCatalog._op_updateMedia.invoke(self, ((id, initialName, provider), context))

        def updateMediaAsync(self, id, initialName, provider, context=None):
            return _M_IceFlix.MediaCatalog._op_updateMedia.invokeAsync(self, ((id, initialName, provider), context))

        def begin_updateMedia(self, id, initialName, provider, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.MediaCatalog._op_updateMedia.begin(self, ((id, initialName, provider), _response, _ex, _sent, context))

        def end_updateMedia(self, _r):
            return _M_IceFlix.MediaCatalog._op_updateMedia.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceFlix.MediaCatalogPrx.ice_checkedCast(proxy, '::IceFlix::MediaCatalog', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceFlix.MediaCatalogPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceFlix::MediaCatalog'
    _M_IceFlix._t_MediaCatalogPrx = IcePy.defineProxy('::IceFlix::MediaCatalog', MediaCatalogPrx)

    _M_IceFlix.MediaCatalogPrx = MediaCatalogPrx
    del MediaCatalogPrx

    _M_IceFlix.MediaCatalog = Ice.createTempClass()
    class MediaCatalog(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceFlix::MediaCatalog')

        def ice_id(self, current=None):
            return '::IceFlix::MediaCatalog'

        @staticmethod
        def ice_staticId():
            return '::IceFlix::MediaCatalog'

        def getTile(self, id, current=None):
            raise NotImplementedError("servant method 'getTile' not implemented")

        def getTilesByName(self, name, exact, current=None):
            raise NotImplementedError("servant method 'getTilesByName' not implemented")

        def getTilesByTags(self, tags, includeAllTags, userToken, current=None):
            raise NotImplementedError("servant method 'getTilesByTags' not implemented")

        def addTags(self, id, tags, userToken, current=None):
            raise NotImplementedError("servant method 'addTags' not implemented")

        def removeTags(self, id, tags, userToken, current=None):
            raise NotImplementedError("servant method 'removeTags' not implemented")

        def renameTile(self, id, name, adminToken, current=None):
            raise NotImplementedError("servant method 'renameTile' not implemented")

        def updateMedia(self, id, initialName, provider, current=None):
            raise NotImplementedError("servant method 'updateMedia' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceFlix._t_MediaCatalogDisp)

        __repr__ = __str__

    _M_IceFlix._t_MediaCatalogDisp = IcePy.defineClass('::IceFlix::MediaCatalog', MediaCatalog, (), None, ())
    MediaCatalog._ice_type = _M_IceFlix._t_MediaCatalogDisp

    MediaCatalog._op_getTile = IcePy.Operation('getTile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceFlix._t_Media, False, 0), (_M_IceFlix._t_WrongMediaId, _M_IceFlix._t_TemporaryUnavailable))
    MediaCatalog._op_getTilesByName = IcePy.Operation('getTilesByName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_IceFlix._t_StringList, False, 0), ())
    MediaCatalog._op_getTilesByTags = IcePy.Operation('getTilesByTags', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_IceFlix._t_StringList, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_IceFlix._t_StringList, False, 0), ())
    MediaCatalog._op_addTags = IcePy.Operation('addTags', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_IceFlix._t_StringList, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_IceFlix._t_Unauthorized, _M_IceFlix._t_WrongMediaId))
    MediaCatalog._op_removeTags = IcePy.Operation('removeTags', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_IceFlix._t_StringList, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_IceFlix._t_Unauthorized, _M_IceFlix._t_WrongMediaId))
    MediaCatalog._op_renameTile = IcePy.Operation('renameTile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_IceFlix._t_Unauthorized, _M_IceFlix._t_WrongMediaId))
    MediaCatalog._op_updateMedia = IcePy.Operation('updateMedia', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_IceFlix._t_StreamProviderPrx, False, 0)), (), None, ())

    _M_IceFlix.MediaCatalog = MediaCatalog
    del MediaCatalog

_M_IceFlix._t_Authenticator = IcePy.defineValue('::IceFlix::Authenticator', Ice.Value, -1, (), False, True, None, ())

if 'AuthenticatorPrx' not in _M_IceFlix.__dict__:
    _M_IceFlix.AuthenticatorPrx = Ice.createTempClass()
    class AuthenticatorPrx(Ice.ObjectPrx):

        def refreshAuthorization(self, user, passwordHash, context=None):
            return _M_IceFlix.Authenticator._op_refreshAuthorization.invoke(self, ((user, passwordHash), context))

        def refreshAuthorizationAsync(self, user, passwordHash, context=None):
            return _M_IceFlix.Authenticator._op_refreshAuthorization.invokeAsync(self, ((user, passwordHash), context))

        def begin_refreshAuthorization(self, user, passwordHash, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.Authenticator._op_refreshAuthorization.begin(self, ((user, passwordHash), _response, _ex, _sent, context))

        def end_refreshAuthorization(self, _r):
            return _M_IceFlix.Authenticator._op_refreshAuthorization.end(self, _r)

        def isAuthorized(self, userToken, context=None):
            return _M_IceFlix.Authenticator._op_isAuthorized.invoke(self, ((userToken, ), context))

        def isAuthorizedAsync(self, userToken, context=None):
            return _M_IceFlix.Authenticator._op_isAuthorized.invokeAsync(self, ((userToken, ), context))

        def begin_isAuthorized(self, userToken, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.Authenticator._op_isAuthorized.begin(self, ((userToken, ), _response, _ex, _sent, context))

        def end_isAuthorized(self, _r):
            return _M_IceFlix.Authenticator._op_isAuthorized.end(self, _r)

        def whois(self, userToken, context=None):
            return _M_IceFlix.Authenticator._op_whois.invoke(self, ((userToken, ), context))

        def whoisAsync(self, userToken, context=None):
            return _M_IceFlix.Authenticator._op_whois.invokeAsync(self, ((userToken, ), context))

        def begin_whois(self, userToken, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.Authenticator._op_whois.begin(self, ((userToken, ), _response, _ex, _sent, context))

        def end_whois(self, _r):
            return _M_IceFlix.Authenticator._op_whois.end(self, _r)

        def addUser(self, user, passwordHash, adminToken, context=None):
            return _M_IceFlix.Authenticator._op_addUser.invoke(self, ((user, passwordHash, adminToken), context))

        def addUserAsync(self, user, passwordHash, adminToken, context=None):
            return _M_IceFlix.Authenticator._op_addUser.invokeAsync(self, ((user, passwordHash, adminToken), context))

        def begin_addUser(self, user, passwordHash, adminToken, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.Authenticator._op_addUser.begin(self, ((user, passwordHash, adminToken), _response, _ex, _sent, context))

        def end_addUser(self, _r):
            return _M_IceFlix.Authenticator._op_addUser.end(self, _r)

        def removeUser(self, user, adminToken, context=None):
            return _M_IceFlix.Authenticator._op_removeUser.invoke(self, ((user, adminToken), context))

        def removeUserAsync(self, user, adminToken, context=None):
            return _M_IceFlix.Authenticator._op_removeUser.invokeAsync(self, ((user, adminToken), context))

        def begin_removeUser(self, user, adminToken, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.Authenticator._op_removeUser.begin(self, ((user, adminToken), _response, _ex, _sent, context))

        def end_removeUser(self, _r):
            return _M_IceFlix.Authenticator._op_removeUser.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceFlix.AuthenticatorPrx.ice_checkedCast(proxy, '::IceFlix::Authenticator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceFlix.AuthenticatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceFlix::Authenticator'
    _M_IceFlix._t_AuthenticatorPrx = IcePy.defineProxy('::IceFlix::Authenticator', AuthenticatorPrx)

    _M_IceFlix.AuthenticatorPrx = AuthenticatorPrx
    del AuthenticatorPrx

    _M_IceFlix.Authenticator = Ice.createTempClass()
    class Authenticator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceFlix::Authenticator')

        def ice_id(self, current=None):
            return '::IceFlix::Authenticator'

        @staticmethod
        def ice_staticId():
            return '::IceFlix::Authenticator'

        def refreshAuthorization(self, user, passwordHash, current=None):
            raise NotImplementedError("servant method 'refreshAuthorization' not implemented")

        def isAuthorized(self, userToken, current=None):
            raise NotImplementedError("servant method 'isAuthorized' not implemented")

        def whois(self, userToken, current=None):
            raise NotImplementedError("servant method 'whois' not implemented")

        def addUser(self, user, passwordHash, adminToken, current=None):
            raise NotImplementedError("servant method 'addUser' not implemented")

        def removeUser(self, user, adminToken, current=None):
            raise NotImplementedError("servant method 'removeUser' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceFlix._t_AuthenticatorDisp)

        __repr__ = __str__

    _M_IceFlix._t_AuthenticatorDisp = IcePy.defineClass('::IceFlix::Authenticator', Authenticator, (), None, ())
    Authenticator._ice_type = _M_IceFlix._t_AuthenticatorDisp

    Authenticator._op_refreshAuthorization = IcePy.Operation('refreshAuthorization', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_IceFlix._t_Unauthorized,))
    Authenticator._op_isAuthorized = IcePy.Operation('isAuthorized', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Authenticator._op_whois = IcePy.Operation('whois', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_IceFlix._t_Unauthorized,))
    Authenticator._op_addUser = IcePy.Operation('addUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_IceFlix._t_Unauthorized,))
    Authenticator._op_removeUser = IcePy.Operation('removeUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_IceFlix._t_Unauthorized,))

    _M_IceFlix.Authenticator = Authenticator
    del Authenticator

_M_IceFlix._t_Main = IcePy.defineValue('::IceFlix::Main', Ice.Value, -1, (), False, True, None, ())

if 'MainPrx' not in _M_IceFlix.__dict__:
    _M_IceFlix.MainPrx = Ice.createTempClass()
    class MainPrx(Ice.ObjectPrx):

        def getAuthenticator(self, context=None):
            return _M_IceFlix.Main._op_getAuthenticator.invoke(self, ((), context))

        def getAuthenticatorAsync(self, context=None):
            return _M_IceFlix.Main._op_getAuthenticator.invokeAsync(self, ((), context))

        def begin_getAuthenticator(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.Main._op_getAuthenticator.begin(self, ((), _response, _ex, _sent, context))

        def end_getAuthenticator(self, _r):
            return _M_IceFlix.Main._op_getAuthenticator.end(self, _r)

        def getCatalog(self, context=None):
            return _M_IceFlix.Main._op_getCatalog.invoke(self, ((), context))

        def getCatalogAsync(self, context=None):
            return _M_IceFlix.Main._op_getCatalog.invokeAsync(self, ((), context))

        def begin_getCatalog(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.Main._op_getCatalog.begin(self, ((), _response, _ex, _sent, context))

        def end_getCatalog(self, _r):
            return _M_IceFlix.Main._op_getCatalog.end(self, _r)

        def register(self, service, context=None):
            return _M_IceFlix.Main._op_register.invoke(self, ((service, ), context))

        def registerAsync(self, service, context=None):
            return _M_IceFlix.Main._op_register.invokeAsync(self, ((service, ), context))

        def begin_register(self, service, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.Main._op_register.begin(self, ((service, ), _response, _ex, _sent, context))

        def end_register(self, _r):
            return _M_IceFlix.Main._op_register.end(self, _r)

        def isAdmin(self, adminToken, context=None):
            return _M_IceFlix.Main._op_isAdmin.invoke(self, ((adminToken, ), context))

        def isAdminAsync(self, adminToken, context=None):
            return _M_IceFlix.Main._op_isAdmin.invokeAsync(self, ((adminToken, ), context))

        def begin_isAdmin(self, adminToken, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceFlix.Main._op_isAdmin.begin(self, ((adminToken, ), _response, _ex, _sent, context))

        def end_isAdmin(self, _r):
            return _M_IceFlix.Main._op_isAdmin.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceFlix.MainPrx.ice_checkedCast(proxy, '::IceFlix::Main', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceFlix.MainPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceFlix::Main'
    _M_IceFlix._t_MainPrx = IcePy.defineProxy('::IceFlix::Main', MainPrx)

    _M_IceFlix.MainPrx = MainPrx
    del MainPrx

    _M_IceFlix.Main = Ice.createTempClass()
    class Main(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceFlix::Main')

        def ice_id(self, current=None):
            return '::IceFlix::Main'

        @staticmethod
        def ice_staticId():
            return '::IceFlix::Main'

        def getAuthenticator(self, current=None):
            raise NotImplementedError("servant method 'getAuthenticator' not implemented")

        def getCatalog(self, current=None):
            raise NotImplementedError("servant method 'getCatalog' not implemented")

        def register(self, service, current=None):
            raise NotImplementedError("servant method 'register' not implemented")

        def isAdmin(self, adminToken, current=None):
            raise NotImplementedError("servant method 'isAdmin' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceFlix._t_MainDisp)

        __repr__ = __str__

    _M_IceFlix._t_MainDisp = IcePy.defineClass('::IceFlix::Main', Main, (), None, ())
    Main._ice_type = _M_IceFlix._t_MainDisp

    Main._op_getAuthenticator = IcePy.Operation('getAuthenticator', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_IceFlix._t_AuthenticatorPrx, False, 0), (_M_IceFlix._t_TemporaryUnavailable,))
    Main._op_getCatalog = IcePy.Operation('getCatalog', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_IceFlix._t_MediaCatalogPrx, False, 0), (_M_IceFlix._t_TemporaryUnavailable,))
    Main._op_register = IcePy.Operation('register', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_ObjectPrx, False, 0),), (), None, (_M_IceFlix._t_UnknownService,))
    Main._op_isAdmin = IcePy.Operation('isAdmin', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_IceFlix.Main = Main
    del Main

# End of module IceFlix
